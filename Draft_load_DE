# -*- coding: utf-8 -*-
"""
Created on Wed Aug 31 16:28:35 2022

@author: Benitez
"""

import numpy as np
import matplotlib
import os
import pandas as pd
from datetime import datetime

path = r'D:\Benitez\Calliope_tutorial\Time-series\Demand_time_series\Historic_load_entsoe\Demand_hourly'
file_name = 'Load_DE_2015.csv'


def read_ENTOSE_csv_load(path, file_name):
    
    '''read csv files from ENTSOE, a specific annual load
    path: location of cvs file
    File_name: name of csv file
    
    Example:
        path = r'D:\Benitez\Calliope_tutorial\Time-series\Demand_time_series\Historic_load_entsoe\Demand_hourly'
        file_name = 'Load_DE_2015.csv'
    
    
    '''
    
    file_name = file_name
    '''reading csv files'''
    
    if os.path.splitext(file_name)[1] == ".csv":
        df = pd.read_csv( path + '\\' + file_name)
        df = df.drop(['Day-ahead Total Load Forecast [MW] - Germany (DE)'], axis=1)
    if df['Actual Total Load [MW] - Germany (DE)'].isnull().values.any() == True:
        df = df.bfill(axis ='rows')
    if 'Hour' in df.columns:
        print('first prepare format')
        df['Time'] = df['Time (CET/CEST)'] + " " + df['Hour']
        df = df.drop(['Time (CET/CEST)', 'Hour'], axis = 1)
        df['Time'] = pd.to_datetime(df['Time'])
        if 'Time' in df.columns:
            print('format ready')
            df = df.set_index('Time')
    new_name = file_name.split('.')[0] + "_MW"
    
    df = df.rename(columns = { 'Actual Total Load [MW] - Germany (DE)' : new_name })
    df = df.resample('60min').mean()
    return df


def day_load(path, file_name):
    
    '''Separate annual hourly data in 365 days of 24 hours
        path: location of cvs file
        File_name: name of csv file
    '''
    
    df = read_ENTOSE_csv_load(path, file_name)
    t_var = np.arange(0, 8760, 24)
    tmp = []
    ds = []
    for t in t_var:
        t
        day_name = 'Day' + '_' + str((t/24)+1)
        data = df.reset_index()
        data = data.drop(['Time'],axis=1)
        data = data.rename(columns = { 'Load_DE_2015_MW' : day_name })
        data = data.iloc[t:t+24].reset_index()
        data.columns
        data = data.drop(['index'], axis = 1)
        tmp.append(data)
        ds = pd.concat(tmp, axis=1)
        if ds.isnull().values.any() == True:
            print('NaN values in the Time series')
    
    return ds 

def day_load_poly_fit (path, file_name):
    
    '''Find a poly_fit grade 6 for each day over 8760 hours
        Returns a list of 365 set of coefficients corresponding to the polynomial    
        path: location of cvs file
        File_name: name of csv file
    '''
    df = day_load(path, file_name)
    columns = df.columns
    tmp = []
    t_var = np.arange(0, 8760, 24)
    pol_order = 6
    xData = np.arange(0, 24, 1)
    for col in columns:
        col
        yData = df[col].to_numpy()
        fit_day = np.polyfit(xData, yData, pol_order)
        tmp.append(fit_day)
   
    return tmp
